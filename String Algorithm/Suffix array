#include <bits/stdc++.h>
using namespace std;

vector<int> build_sa(const string &s) {
    int n = (int)s.size(), k = 0;
    vi p(n), c(n), pn(n), cn(n);
    vector<pair<char,int>> a(n);
    for(int i=0;i<n;i++) a[i] = {s[i], i};
    sort(a.begin(), a.end());
    for(int i=0;i<n;i++) p[i] = a[i].second;
    c[p[0]] = 0;
    for(int i=1;i<n;i++) c[p[i]] = c[p[i-1]] + (a[i].first != a[i-1].first);
    while((1 << k) < n) {
        for(int i=0;i<n;i++) pn[i] = (p[i] - (1 << k) + n) % n;
        vector<int> cnt(n,0), pos(n);
        for(int x : c) cnt[x]++;
        pos[0] = 0;
        for(int i=1;i<n;i++) pos[i] = pos[i-1] + cnt[i-1];
        for(int x : pn) p[pos[c[x]]++] = x;
        cn[p[0]] = 0;
        for(int i=1;i<n;i++) {
            pair<int,int> prev = {c[p[i-1]], c[(p[i-1] + (1 << k)) % n]};
            pair<int,int> now  = {c[p[i]], c[(p[i] + (1 << k)) % n]};
            cn[p[i]] = cn[p[i-1]] + (now != prev);
        }
        c = cn; k++;
    }
    return p;
}

vi build_lcp(const string &s, const vi &sa) {
    int n = (int)s.size(), k = 0;
    vi rank(n), lcp(n-1);
    for(int i=0;i<n;i++) rank[sa[i]] = i;
    for(int i=0;i<n;i++) {
        if(rank[i] == n-1) { k=0; continue; }
        int j = sa[rank[i]+1];
        while(i+k<n && j+k<n && s[i+k]==s[j+k]) k++;
        lcp[rank[i]] = k;
        if(k) k--;
    }
    return lcp;
}

// ----------------- 1. Smallest Cyclic Shift -----------------
int smallest_cyclic_shift(const string &s) {
    string t = s + s;
    auto sa = build_suffix_array(t);
    for(int i : sa)
        if(i < (int)s.size()) return i;  // প্রথম সঠিক suffix যেটা সাইজের মধ্যে
    return 0;
}

// ----------------- 2. Substring Search -----------------
// Returns true if s is substring of t, using binary search on suffix array of t
bool substring_search(const string &t, const vector<int> &sa, const string &s) {
    int n = (int)t.size(), m = (int)s.size();
    int l = 0, r = n-1;
    while(l <= r) {
        int mid = (l+r)/2;
        string cur = t.substr(sa[mid], min(m, n - sa[mid]));
        if(cur == s) return true;
        else if(cur < s) l = mid + 1;
        else r = mid - 1;
    }
    return false;
}

// ----------------- 3. Compare Two Substrings in O(1) -----------------
// Requires LCP + RMQ (segment tree or sparse table) built on LCP
struct LCP_RMQ {
    int n; vector<int> st;
    LCP_RMQ(const vector<int> &lcp) {
        n = (int)lcp.size();
        int sz = 1; while(sz < n) sz <<= 1;
        st.assign(2*sz, INT_MAX);
        for(int i=0; i<n; i++) st[sz+i] = lcp[i];
        for(int i=sz-1; i>0; i--) st[i] = min(st[2*i], st[2*i+1]);
    }
    int query(int l, int r) {
        int res = INT_MAX;
        for(l+=n, r+=n; l<=r; l>>=1, r>>=1) {
            if((l&1) == 1) res = min(res, st[l++]);
            if((r&1) == 0) res = min(res, st[r--]);
        }
        return res;
    }
};
// substrings [l1,r1], [l2,r2] এর তুলনা (0-based indexing)
bool compare_substrings(int l1,int r1,int l2,int r2, const vector<int> &sa, const vector<int> &rank, LCP_RMQ &rmq) {
    int len1 = r1-l1+1, len2 = r2-l2+1;
    if(l1 == l2) return len1 <= len2; // same start, smaller length considered smaller
    int left = rank[l1], right = rank[l2];
    if(left > right) swap(left,right);
    int lcp_len = rmq.query(left, right-1);
    int min_len = min(len1,len2);
    if(lcp_len >= min_len) return len1 <= len2;
    else return sa[left] < sa[right];
}

// ----------------- 4. LCP of two suffixes -----------------
// Already computed via LCP array + RMQ
// lcp between suffixes starting at i and j = query on LCP array between ranks[i], ranks[j]

int main() {
    string s = "banana";
    auto sa = build_suffix_array(s + "$");
    auto lcp = build_lcp_array(s + "$", sa);

    cout << "Suffix Array:\n";
    for(int i : sa) cout << i << " ";
    cout << "\nLCP Array:\n";
    for(int i=0; i<(int)lcp.size(); i++) cout << lcp[i] << " ";
    cout << "\n";

    // Example usage:

    // 1. Smallest cyclic shift of s
    cout << "Smallest cyclic shift index: " << smallest_cyclic_shift(s) << "\n";

    // 2. Substring search
    string pattern = "nan";
    bool found = substring_search(s + "$", sa, pattern);
    cout << "Substring '" << pattern << "' found? " << (found ? "YES" : "NO") << "\n";

    // 3. Compare two substrings (l1,r1) and (l2,r2)
    vector<int> rank(sa.size());
    for(int i=0; i<(int)sa.size(); i++) rank[sa[i]] = i;
    LCP_RMQ rmq(lcp);
    int l1=1, r1=3, l2=2, r2=4;
    bool cmp_res = compare_substrings(l1,r1,l2,r2,sa,rank,rmq);
    cout << "Substring s[" << l1 << "," << r1 << "] is "
         << (cmp_res ? "<=" : ">") << " s[" << l2 << "," << r2 << "]\n";

    // 4. LCP of suffixes starting at i and j
    int i=1, j=3;
    int lcp_ij = rmq.query(min(rank[i], rank[j]), max(rank[i], rank[j]) - 1);
    cout << "LCP of suffixes starting at " << i << " and " << j << " is " << lcp_ij << "\n";

    // 5. Number of distinct substrings
    // total substrings = n*(n+1)/2, subtract sum of LCP array to remove duplicates
    int n = (int)s.size();
    long long total_substrings = 1LL * n * (n + 1) / 2;
    long long sum_lcp = 0;
    for(int x : lcp) sum_lcp += x;
    cout << "Number of distinct substrings: " << (total_substrings - sum_lcp) << "\n";

    return 0;
}
