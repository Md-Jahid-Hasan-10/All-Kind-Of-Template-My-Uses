struct point{
    int x,y;
    bool operator == (point b){
        if(x == b.x && y == b.y)return true;
        return false;
    }
    point operator - (point b){return {x - b.x , y - b.y};}
    point operator + (point b){return {x + b.x , y + b.y};}
    int operator ^ (point b){return (x * b.y - y * b.x);}
    int operator * (point b){return (x * b.x + y * b.y);}
};
vector<point> pt;

bool cmp(point a,point b){
    if(a.x == b.x)return a.y < b.y;
    return a.x < b.x;
}

bool dir(point a,point b,point c){
    point A = a - c,B = b - c;
    return (A ^ B) >= 0;
}

vector<point> convex(){
    vector<point> h;
    sort(all(pt),cmp);
    for(auto i : pt){
        while(h.size() > 1 && !dir(h[h.size()-1],i,h[h.size()-2]))
            h.pop_back();
        h.push_back(i);
    }
    int down = h.size();
    h.pop_back();
    reverse(all(pt));
    for(auto i : pt){
        while(h.size() > down && !dir(h[h.size()-1],i,h[h.size()-2]))
            h.pop_back();
        h.push_back(i);
    }
    h.pop_back();
    return h;
}
