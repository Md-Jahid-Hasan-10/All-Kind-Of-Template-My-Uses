struct pt {
    int x, y;
    pt() : x(0), y(0) {}
    pt(int a, int b) : x(a), y(b) {}
};
// Function to calculate the cross product (direction) of vectors (p1p2) and (p1p3)
int direction(const pt &p1, const pt &p2, const pt &p3) {
    return (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x);
}
// Function to check if pt p3 lies on the segment p1p2
bool onsegment(const pt &p1, const pt &p2, const pt &p3) {
    return min(p1.x, p2.x) <= p3.x && p3.x <= max(p1.x, p2.x) &&
           min(p1.y, p2.y) <= p3.y && p3.y <= max(p1.y, p2.y);
}
pt vec(pt a, pt b){
    return {b.x - a.x, b.y - a.y};
}
dl sqnorm(pt a){
    return (a.x*a.x + a.y*a.y);
}
dl dot(pt a, pt b){
    return (a.x*b.x + a.y*b.y);
}
pt rotateCCW(pt a,pt b,dl ang)
{
    pt v = {b.x-a.x,b.y-a.y};// vec from a to b
    dl c = cos(ang),s = sin(ang);// ang is rediun
    pt res = {v.x*c-v.y*s,v.x*s+v.y*c};
    return res;//rotateCW is (-s put);
}
pt unit(pt a)
{
    double val = sqrt(a.x*a.x+a.y*a.y);
    return pt(a.x/val,a.y/val);
}
dl angle(pt a,pt o,pt b){
    pt oa = vec(o , a), ob = vec(o , b);
    if(sqnorm(oa) == 0 || sqnorm(ob) == 0){
        return 0;
    }
    double alpha = acos(dot(oa, ob) / sqrt(sqnorm(oa) * sqnorm(ob)));
    alpha = alpha * 180 / PI;//angle in degree
    return alpha;// angle of AOB
}
double abs(pt a) {
    return sqrt(sqnorm(a));
}
double angle(pt a, pt b) {
    return acos(dot(a, b) / abs(a) / abs(b));
}
int triArea2(const pt &a, const pt &b, const pt &c) {
    return (a.x*(b.y-c.y) + b.x*(c.y-a.y) + c.x*(a.y-b.y));
}
int sqDist(const pt &a, const pt &b) {
    return ((a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y));
}
dl angle(dl a, dl b,dl c){
    dl alpha = acos((b*b-c*c-a*a)/(-2*a*c));
    //alpha = alpha*180.0/PI;//angle (ABC) in degree
    return alpha;
}
dl Slope(pt a, pt b)
{
    if(a.x == b.x && a.y == b.y)return oo;
    double dx = b.x - a.x;
    double dy = b.y - a.y;
    if(dx == 0)return oo;
    return (double)dy / dx;
}
