
class SparseTable {
public:
    vector<vector<int>> st;
    vector<int> log;
    SparseTable(const vector<int>& arr) {
        int n = arr.size();
        int maxLog = log2(n) + 1;
        st.resize(n, vector<int>(maxLog));
        log.resize(n + 1);
        log[1] = 0;
        for (int i = 2; i <= n; i++) 
            log[i] = log[i / 2] + 1;
        for (int i = 0; i < n; i++) 
            st[i][0] = arr[i];
        for (int j = 1; j <= log[n]; j++) {
            for (int i = 0; i + (1 << j) <= n; i++) {
                st[i][j] = marge(st[i][j - 1], st[i + (1 << (j - 1))][j - 1]);
            }
        }
    }
    int query(int l, int r) {
        int j = log[r - l + 1];
        return marge(st[l][j], st[r - (1 << j) + 1][j]);
    }
    int marge(int a, int b){
        return __gcd(a,b);
    }
};
//! 0 based index -> query O(1),pre compute nlog(n) and support idempotent funtion f(a,a) = a 
//! minimum, maximum, GCD, and XOR
void Goriber_solve()
{
    int n,q;
    cin >> n >> q;
    vi a(n);
    for(auto &x:a) cin >> x;
    vi diff(n);
    diff[0] = a[0];
    for(int i = 1; i < n ; i++){
        diff[i] = abs(a[i] - a[i-1]);
    }
    SparseTable st(diff);
    while(q--){
        int l,r;
        cin >> l >> r;
        l--,r--;
        if(l == r)cout << 0 << " ";
        else cout << st.query(l+1,r) << " ";
    }
    cout << endl;
}
