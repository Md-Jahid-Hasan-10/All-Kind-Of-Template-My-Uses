//! In The Name Of Allah
// Dinics algo O(V^2 * E)
/*********************************************************************\
*!          |       *        |       | ___  | @                       |
*!          |      * *       |       |  |   |  @                      |
*!          |     *   *      |       |  |   |   @                     |
*!          |    *******     |-------|  |   |    @                    |
*! |*       |   *       *    |       |  |   |   @                     |
*! |        |  *         *   |       |  |   |  @                      |
*! |________| *           *  |       | ___  | @                       |
*!                                                                    |
*!  codeforces = Jahid__Noob                                          |
*!  mail =  2227Jahid@gmail.com                                       |
*!  IIT,Jahangirnagar University(41)                                  |
*!                                                                    |
**********************************************************************/

#include <bits/stdc++.h>
using namespace std;

#define int long long
#define endl '\n'
#define pb push_back
#define pob pop_back
#define make M
#define F first
#define S second
#define all(s) (s).begin(), (s).end()
#define rall(s) s.rbegin(), s.rend()
#define sz(x) (int)x.size()
#define mem(a, b) memset(a, b, sizeof(a))
#define cnt_bit(x) __builtin_popcountll(x)
#define getbit(n, i) (((n) & (1LL << (i))) != 0)
#define msb(x) 31 - __builtin_clz(x)
#define TxtIO                         \
    freopen("sample.in", "r", stdin); \
    freopen("sample.out", "w", stdout);
#define Fokinnir_moto_kaj_koris_na \
    ios_base::sync_with_stdio(0);  \
    cin.tie(0);                    \
    cout.tie(0);
#define py cout << "YES" << endl
#define pn cout << "NO" << endl
#define PI acos(-1)
#define sum_of(A) accumulate(all(A), 0ll)
#define max_of(A) *max_element(all(A))
#define min_of(A) *min_element(all(A))

typedef long long ll;
typedef double dl;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int, int> pii;
typedef vector<pii> vii;
typedef array<int,3> tu;

//#define DEBUG
#define TEM template <class... T>
TEM istream& operator>>(istream& in, pair<T...>& p) { return in >> p.first >> p.second; }
TEM ostream& operator<<(ostream& out, const pair<T...>& p) { return out << '(' << p.first << ", " << p.second << ')'; }
#define def_in(cont) TEM istream& operator>>(istream& in, cont<T...>& A) { for (auto& a : A) in >> a; return in; }
#define def_out(cont) TEM ostream& operator<<(ostream& out, const cont<T...>& A) { int i = 0; auto it = A.begin(); while (it != A.end()) out << &" "[!i++] << *it++; return out; }
def_in(vector) def_in(deque) def_out(vector) def_out(deque) def_out(set) def_out(map) def_out(multiset)

TEM void c_in(T&... args) { ((cin >> args), ...); }
TEM void c_out(const T&... args) { int i = 0; ((cout << &" "[!i++] << args), ...) << '\n'; }
void c_out(bool b) { c_out(b ? "YES" : "NO"); }

#ifdef DEBUG
TEM void c_err(const T&... args) { int i = 0; ((cerr << &" "[!i++] << args), ...) << '\n'; }
#else
#define c_err(...)
#endif
#define dbg(args...) c_err(#args, '=', args)

ll gcd(ll a, ll b) { return __gcd(a, b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }

/*
int p = 237,mod = 1000000289;
auto Goriber_function = [&] (int m) -> int{

};
*/
const ll oo = 1e18;
const ll mod = 1e9 + 7;
const int N = 5010;

const long long inf = 1LL << 61;
struct Dinic {
	struct edge {
		int to, rev;
		long long flow, w;
		int id;
	};
	int n, s, t, mxid;
	vector<int> d, flow_through;
	vector<int> done;
	vector<vector<edge>> g;
	Dinic() {}
	Dinic(int _n) {
		n = _n + 10;
		mxid = 0;
		g.resize(n);
	}
	void add_edge(int u, int v, long long w, int id = -1) {
		edge a = {v, (int)g[v].size(), 0, w, id};
		edge b = {u, (int)g[u].size(), 0, 0, -2};//for bidirectional edges cap(b) = w
		g[u].emplace_back(a);
		g[v].emplace_back(b);
		mxid = max(mxid, id);
	}
	bool bfs() {
		d.assign(n, -1);
		d[s] = 0;
		queue<int> q;
		q.push(s);
		while (!q.empty()) {
			int u = q.front();
			q.pop();
			for (auto &e : g[u]) {
				int v = e.to;
				if (d[v] == -1 && e.flow < e.w) d[v] = d[u] + 1, q.push(v);
			}
		}
		return d[t] != -1;
	}
	long long dfs(int u, long long flow) {
		if (u == t) return flow;
		for (int &i = done[u]; i < (int)g[u].size(); i++) {
			edge &e = g[u][i];
			if (e.w <= e.flow) continue;
			int v = e.to;
			if (d[v] == d[u] + 1) {
				long long nw = dfs(v, min(flow, e.w - e.flow));
				if (nw > 0) {
					e.flow += nw;
					g[v][e.rev].flow -= nw;
					return nw;
				}
			}
		}
		return 0;
	}
	long long max_flow(int _s, int _t) {
		s = _s;
		t = _t;
		long long flow = 0;
		while (bfs()) {
			done.assign(n, 0);
			while (long long nw = dfs(s, inf)) flow += nw;
		}
		flow_through.assign(mxid + 10, 0);
		for(int i = 0; i < n; i++) for(auto e : g[i]){
		    if(e.id >= 0) flow_through[e.id] = e.flow;
		}
		return flow;
	}
};
void Goriber_solve()
{
    int n,m;
    cin >> n >> m;
    Dinic d(n+1);
    vii edges;
    for(int i = 1; i <= m; i++){
        int u,v,w;
        cin >> u >> v;
        d.add_edge(u,v,1,i);
        d.add_edge(v,u,1,i+m);
        edges.pb({u,v});
    }
    // min_cut = maxFlow
    int mx = d.max_flow(1,n);
    cout << mx << endl;
    // now cur min edge where flow is 0
    vector<bool> vis(n+1,false);
    queue<int> q;
    q.push(1);vis[1] = true;
    while(!q.empty()){
        int u = q.front();q.pop();
        for(auto e : d.g[u]){
            if(!vis[e.to] && e.flow < e.w){
                vis[e.to] = true;
                q.push(e.to);
            }
        }
    }
    for(int i = 1; i <= m; i++){
        edges.pb({edges[i-1].S,edges[i-1].F});
    }
    vii ans;
    for(int i = 1; i <= n; i++){
        if(vis[i]){
            for(auto e : d.g[i]){
                if(e.id >= 1 && !vis[e.to]){
                    ans.pb({edges[e.id-1].F,edges[e.id-1].S});
                }
            }
        }
    }
    for(auto e : ans)cout << e.F << " " << e.S << endl;
    // now find path where flow is occured
    vector<vi> paths;
    for(int i = 0; i < mx; i++){
        vi path;
        int cur = 1;
        path.pb(1);
        while(cur != n){
            for(auto &e : d.g[cur]){
                if(e.flow > 0 && e.w == 1){
                    e.flow = 0;
                    cur = e.to;
                    path.pb(cur);
                    break;
                }
            }
        }
        paths.pb(path);
    }
    for(auto path : paths){
        cout << sz(path) << endl;
        for(auto x : path)cout << x << " ";
        cout << endl;
    }
}
signed main()
{
    Fokinnir_moto_kaj_koris_na
    int _ = 1,tc = 0;
    //cin >> _;
    while (_--)
    {
        //cout<<"Case "<<++tc<<": ";
        Goriber_solve();
    }
}
