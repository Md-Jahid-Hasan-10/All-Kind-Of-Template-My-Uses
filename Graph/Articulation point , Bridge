vi graph[N];
int timer = 0;
int vis[N],low[N],in_time[N];
set<int> articulation_points;

void dfs(int node, int par) {
    vis[node] = 1;
    low[node] = in_time[node] = ++timer;
    int children = 0;
    for (int child : graph[node]) {
        if (child == par) continue;
        if (!vis[child]) {
            children++;
            dfs(child, node);
            low[node] = min(low[node], low[child]);
            if (par != -1 && low[child] >= in_time[node]) {
                articulation_points.insert(node);
            }
        }
        else {
            low[node] = min(low[node], in_time[child]);
        }
    }
    if (par == -1 && children > 1) {
        articulation_points.insert(node);
    }
}
void Goriber_solve()
{
    int n,m;
    cin >> n >> m;
    for(int i = 1; i <= n; i++){
        graph[i].clear();
        vis[i] = 0;
        low[i] = in_time[i] = 0;
    }
    for(int i = 0; i < m; i++){
        int u,v;
        cin >> u >> v;
        graph[u].pb(v);
        graph[v].pb(u);
    }
    for(int i = 1; i <= n; i++){
        if(vis[i] == 0){
            dfs(i,-1);
        }
    }
    cout << sz(articulation_points) << endl;
    articulation_points.clear();

}
