vi graph[N];
void dfs(int node,int par,int lev,vi &d){
    d[node] = lev;
    for(auto u : graph[node]){
        if(u != par){
            dfs(u,node,lev+1,d);
        }
    }
}
void Goriber_solve()
{
    int n;
    cin >> n;
    for(int i = 0; i <= n; i++){
        graph[i].clear();
    }
    for(int i = 1; i < n; i++){
        int u,v;
        cin >> u >> v;
        u--,v--;
        graph[u].pb(v);
        graph[v].pb(u);
    }
    vi d1(n,0),d2(n,0);
    dfs(0,-1,0,d1);
    int a = max_element(all(d1)) - d1.begin();
    dfs(a,-1,0,d1);
    int b = max_element(all(d1)) - d1.begin();
    dfs(b,-1,0,d2);
    //here a to b is tree diameter , diameter means longest path length of tree
}
