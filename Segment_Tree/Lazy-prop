#include <bits/stdc++.h>
using namespace std;

class SegmentTree {
    vector<long long> tree, lazy;
    int n;
    int conbine(int x,int y){
        return max(x,y);
    }
    void build(int node, int start, int end, const vector<int>& arr) {
        if (start == end) {
            tree[node] = arr[start];
        } else {
            int mid = (start + end) / 2;
            build(2 * node, start, mid, arr);
            build(2 * node + 1, mid + 1, end, arr);
            tree[node] = combine(tree[2 * node] , tree[2 * node + 1]);
        }
    }

    void propagate(int node, int start, int end) {
        if (lazy[node] != 0) {
            tree[node] += lazy[node] * (end - start + 1);
            if (start != end) {
                lazy[2 * node] += lazy[node];
                lazy[2 * node + 1] += lazy[node];
            }
            lazy[node] = 0;
        }
    }

    void updateRange(int node, int start, int end, int l, int r, int val) {
        propagate(node, start, end);
        if (start > r || end < l) return;

        if (start >= l && end <= r) {
            lazy[node] += val;
            propagate(node, start, end);
            return;
        }

        int mid = (start + end) / 2;
        updateRange(2 * node, start, mid, l, r, val);
        updateRange(2 * node + 1, mid + 1, end, l, r, val);
        tree[node] = combine(tree[2 * node] , tree[2 * node + 1]);
    }

    long long queryRange(int node, int start, int end, int l, int r) {
        propagate(node, start, end);
        if (start > r || end < l) return -oo;//! what type of operation ? identical value

        if (start >= l && end <= r) return tree[node];

        int mid = (start + end) / 2;
        return combine(queryRange(2 * node, start, mid, l, r) , queryRange(2 * node + 1, mid + 1, end, l, r));
    }

public:
    SegmentTree(const vector<int>& arr) {
        n = arr.size();
        tree.resize(4 * n);
        lazy.resize(4 * n, 0);
        build(1, 0, n - 1, arr);
    }

    void updateRange(int l, int r, int val) {
        updateRange(1, 0, n - 1, l, r, val);
    }

    long long queryRange(int l, int r) {
        return queryRange(1, 0, n - 1, l, r);
    }
};
int main() {
    vector<int> arr = {1, 3, 5, 7, 9, 11};
    SegmentTree segTree(arr);

    cout << "Initial sum of range [1, 4]: " << segTree.queryRange(1, 4) << endl;

    segTree.updateRange(1, 3, 5);
    cout << "Sum of range [1, 4] after adding 5 to range [1, 3]: " << segTree.queryRange(1, 4) << endl;

    segTree.updateRange(2, 5, 10);
    cout << "Sum of range [3, 5] after adding 10 to range [2, 5]: " << segTree.queryRange(3, 5) << endl;

    return 0;
}
