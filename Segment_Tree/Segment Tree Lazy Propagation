#include<bits/stdc++.h>
using namespace std;


const int N = 2e5 + 12;
int ar[N],tree[4*N],lazy[4*N];
int combine(int x,int y){
    return x + y;
}
void build(int node,int l,int r)
{
    lazy[node] = 0;
    if(l == r){
        tree[node] = ar[l];
        return;
    }
    int mid = (l + r)/2;
    build(node*2,l,mid);
    build(node*2+1,mid+1,r);
    tree[node] = combine(tree[node*2],tree[node*2 + 1]);
}
void propagate(int node,int l,int r){
    if(l != r){
        lazy[2*node] += lazy[node];
        lazy[2*node+1] += lazy[node];
    }
    tree[node] += (r - l + 1)*lazy[node];
    lazy[node] = 0;
}
int query(int node,int l,int r,int a,int b){
    propagate(node,l,r);
    if(l > b || r < a){
        return 0;/// identical value return
    }
    if(a <= l && r <= b){
        return tree[node];
    }
    int mid = (l + r)/2;
    int x = query(node * 2,l,mid,a,b);
    int y = query(node * 2 + 1,mid + 1,r,a,b);
    return combine(x,y);
}
void update(int node,int l,int r,int a,int b,int val){
    propagate(node,l,r);
    if(a > r || b < l)return;
    if(a <= l && r <= b){
        lazy[node] += val;
        propagate(node,l,r);
        return;
    }
    int mid = (l + r)/2;
    update(node*2,l,mid,a,b,val);
    update(node*2+1,mid+1,r,a,b,val);
    tree[node] = combine(tree[node*2],tree[node*2+1]);
}
signed main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);

}
