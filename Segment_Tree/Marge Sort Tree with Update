#include <bits/stdc++.h>
using namespace std;

const int MAXN = 1e5 + 5;
vector<int> tree[4 * MAXN];
int arr[MAXN];

void build(int node, int l, int r) {
    if (l == r) {
        tree[node] = {arr[l]};
        return;
    }
    int mid = (l + r) / 2;
    build(2 * node, l, mid);
    build(2 * node + 1, mid + 1, r);
    merge(tree[2 * node].begin(), tree[2 * node].end(),
          tree[2 * node + 1].begin(), tree[2 * node + 1].end(),
          back_inserter(tree[node]));
}

// Count of elements <= k in range [ql, qr]
int query(int node, int l, int r, int ql, int qr, int k) {
    if (qr < l || r < ql) return 0;
    if (ql <= l && r <= qr)
        return upper_bound(tree[node].begin(), tree[node].end(), k) - tree[node].begin();

    int mid = (l + r) / 2;
    return query(2 * node, l, mid, ql, qr, k) +
           query(2 * node + 1, mid + 1, r, ql, qr, k);
}

// Point update: change arr[pos] from old_val to new_val
void update(int node, int l, int r, int pos, int old_val, int new_val) {
    // remove old_val
    auto it = lower_bound(tree[node].begin(), tree[node].end(), old_val);
    if (it != tree[node].end() && *it == old_val)
        tree[node].erase(it);

    // insert new_val
    tree[node].insert(lower_bound(tree[node].begin(), tree[node].end(), new_val), new_val);

    if (l == r) return;

    int mid = (l + r) / 2;
    if (pos <= mid)
        update(2 * node, l, mid, pos, old_val, new_val);
    else
        update(2 * node + 1, mid + 1, r, pos, old_val, new_val);
}

int main() {
    ios::sync_with_stdio(false); cin.tie(nullptr);
    int n, q;
    cin >> n >> q;

    for (int i = 1; i <= n; ++i)
        cin >> arr[i];

    build(1, 1, n);

    while (q--) {
        int type;
        cin >> type;
        if (type == 1) {
            int l, r, k;
            cin >> l >> r >> k;
            cout << query(1, 1, n, l, r, k) << '\n';
        } else {
            int pos, val;
            cin >> pos >> val;
            update(1, 1, n, pos, arr[pos], val);
            arr[pos] = val;
        }
    }

    return 0;
}
