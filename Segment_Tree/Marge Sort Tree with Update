#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

template<typename T>
using ordered_set = tree<
    T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

const int MAXN = 1e5 + 5;
ordered_set<int> tree[4 * MAXN];
int arr[MAXN];

void build(int node, int l, int r) {
    if (l == r) {
        tree[node].insert(arr[l]);
        return;
    }
    int mid = (l + r) / 2;
    build(2 * node, l, mid);
    build(2 * node + 1, mid + 1, r);
    for (int val : tree[2 * node]) tree[node].insert(val);
    for (int val : tree[2 * node + 1]) tree[node].insert(val);
}

int query(int node, int l, int r, int ql, int qr, int k) {
    if (qr < l || r < ql) return 0;
    if (ql <= l && r <= qr)
        return tree[node].order_of_key(k + 1);  // count of elements ≤ k

    int mid = (l + r) / 2;
    return query(2 * node, l, mid, ql, qr, k)
         + query(2 * node + 1, mid + 1, r, ql, qr, k);
}

void update(int node, int l, int r, int pos, int old_val, int new_val) {
    tree[node].erase(old_val);
    tree[node].insert(new_val);
    if (l == r) return;
    int mid = (l + r) / 2;
    if (pos <= mid)
        update(2 * node, l, mid, pos, old_val, new_val);
    else
        update(2 * node + 1, mid + 1, r, pos, old_val, new_val);
}

int main() {
    int n, q;
    cin >> n >> q;
    for(int i = 1; i <= n; ++i)
        cin >> arr[i];

    build(1, 1, n);

    while(q--) {
        int type;
        cin >> type;
        if (type == 1) {
            // Query: Count of elements ≤ k in [l, r]
            int l, r, k;
            cin >> l >> r >> k;
            cout << query(1, 1, n, l, r, k) << '\n';
        } else {
            // Update: position = pos, new value = val
            int pos, val;
            cin >> pos >> val;
            update(1, 1, n, pos, arr[pos], val);
            arr[pos] = val;
        }
    }

    return 0;
}
