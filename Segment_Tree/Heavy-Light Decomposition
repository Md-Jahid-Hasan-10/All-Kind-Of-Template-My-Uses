#include <bits/stdc++.h>
using namespace std;

const int N = 200005;
vector<pair<int,int>> adj[N];
int parent[N][20], depth[N], heavy[N], head[N], pos[N];
int sz[N], arr[N], baseArray[N], seg[4*N], U[N], V[N];
int n, curPos;

int dfs(int v, int p) {
    parent[v][0] = p;
    depth[v] = depth[p] + 1;
    sz[v] = 1;
    int mx = 0;
    for (auto &e : adj[v]) {
        int u = e.first;
        if (u == p) continue;
        int w = e.second;
        arr[u] = w;                 // store edge weight in child
        int sub = dfs(u, v);
        sz[v] += sub;
        if (sub > mx) mx = sub, heavy[v] = u;
    }
    return sz[v];
}

void decompose(int v, int h) {
    head[v] = h;
    pos[v] = curPos++;
    baseArray[pos[v]] = arr[v];

    if (heavy[v])
        decompose(heavy[v], h);

    for (auto &e : adj[v]) {
        int u = e.first;
        if (u != parent[v][0] && u != heavy[v]) {
            decompose(u, u);
        }
    }
}

void build(int idx, int l, int r) {
    if (l == r) { seg[idx] = baseArray[l]; return; }
    int mid = (l+r)/2;
    build(idx*2, l, mid);
    build(idx*2+1, mid+1, r);
    seg[idx] = max(seg[idx*2], seg[idx*2+1]);
}

void update(int idx, int l, int r, int p, int v) {
    if (l == r) { seg[idx] = v; return; }
    int mid = (l+r)/2;
    if (p <= mid) update(idx*2, l, mid, p, v);
    else update(idx*2+1, mid+1, r, p, v);
    seg[idx] = max(seg[idx*2], seg[idx*2+1]);
}

int querySeg(int idx, int l, int r, int L, int R) {
    if (r < L || R < l) return 0;
    if (L <= l && r <= R) return seg[idx];
    int mid = (l+r)/2;
    return max(querySeg(idx*2, l, mid, L, R),
               querySeg(idx*2+1, mid+1, r, L, R));
}

int queryPath(int u, int v) {
    int res = 0;
    while (head[u] != head[v]) {
        if (depth[head[u]] < depth[head[v]]) swap(u, v);
        res = max(res, querySeg(1, 0, n-1, pos[head[u]], pos[u]));
        u = parent[head[u]][0];
    }
    if (u == v) return res;
    if (depth[u] > depth[v]) swap(u, v);
    return max(res, querySeg(1, 0, n-1, pos[u]+1, pos[v]));
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int t; cin >> t;
    while (t--) {
        cin >> n;
        for (int i = 1; i <= n; i++) {
            adj[i].clear();
            heavy[i] = 0;
        }
        for (int i = 1; i < n; i++) {
            int u,v,c;
            cin >> u >> v >> c;
            adj[u].push_back({v,c});
            adj[v].push_back({u,c});
            U[i] = u; V[i] = v;
        }
        depth[0] = 0; curPos = 0;
        dfs(1,0);
        decompose(1,1);
        build(1,0,n-1);

        while (true) {
            string s; cin >> s;
            if (s == "DONE") break;
            if (s == "QUERY") {
                int u, v; cin >> u >> v;
                cout << queryPath(u, v) << "\n";
            } else { // CHANGE
                int i, val; cin >> i >> val;
                int u = U[i], v = V[i];
                if (depth[u] > depth[v]) update(1,0,n-1,pos[u],val);
                else update(1,0,n-1,pos[v],val);
            }
        }
    }
}
