struct Node {
    Node* links[11] = {nullptr};
    int cnt_pre = 0;
    int cnt_word = 0;
    bool contains(char c) {
        return (links[c - '0'] != nullptr);
    }
    void put(char c, Node* node) {
        links[c - '0'] = node;
    }
    Node* get(char c) {
        return links[c - '0'];
    }
    void increasePre() {
        cnt_pre++;
    }
    void increaseWord() {
        cnt_word++;
    }
    int getPre() {
        return cnt_pre;
    }
    int getWord() {
        return cnt_word;
    }
    void deleteNode() {
        for (int i = 0; i < 11; ++i) {
            if (links[i] != nullptr) {
                links[i]->deleteNode();
                delete links[i];
            }
        }
    }
};

struct Trie {
    Node* root;
    Trie() {
        root = new Node();
    }
    bool insert(const string& s) {
        Node* cur_node = root;
        for (char c : s) {
            if (!cur_node->contains(c)) {
                cur_node->put(c, new Node());
            }
            cur_node = cur_node->get(c);
            cur_node->increasePre();
            if (cur_node->getWord() > 0) {
                return true;
            }
        }
        cur_node->increaseWord();
        return false;
    }
    int countWords(const string& s) {
        Node* cur_node = root;
        for (char c : s) {
            if (!cur_node->contains(c)) {
                return 0;
            }
            cur_node = cur_node->get(c);
        }
        return cur_node->getWord();
    }
    int countPrefixes(const string& s) {
        Node* cur_node = root;
        for (char c : s) {
            if (!cur_node->contains(c)) {
                return 0;
            }
            cur_node = cur_node->get(c);
        }
        return cur_node->getPre();
    }
    void deleteTrie() {
        root->deleteNode();
        delete root;
    }
};
