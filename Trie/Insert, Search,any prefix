struct Node{
    Node* links[26];
    bool flag = false;
    bool contains(char c){
        return (links[c-'a'] != NULL);
    }
    void put(char c, Node* node){
        links[c - 'a'] = node;
    }
    Node* get(char c){
        return links[c - 'a'];
    }
    void setEnd(){
        flag = true;
    }
    bool isEnd(){
        return flag;
    }
};

class Trie{
private:
    Node *root;

public:
    Trie(){
        root = new Node();
    }
    void insert(string s){
        Node* cur_node = root;
        for(char c : s){
            if(!cur_node -> contains(c)){
                cur_node -> put(c, new Node());
            }
            //! move reference node
            cur_node = cur_node -> get(c);
        }
        cur_node -> setEnd();
    }
    bool search(string s){
        Node* cur_node = root;
        for(char c : s){
            if(!cur_node -> contains(c)){
                return false;
            }
            cur_node = cur_node -> get(c);
        }
        return cur_node -> isEnd();
    }
    bool startsWith(string s){
        Node* cur_node = root;
        for(char c : s){
            if(!cur_node -> contains(c)){
                return false;
            }
            cur_node = cur_node -> get(c);
        }
        return true;
    }
};
