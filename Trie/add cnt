struct Node{
    Node* links[26];
    int cnt = 0;
    bool contains(char c){
        return (links[c-'a'] != NULL);
    }
    void put(char c, Node* node){
        links[c - 'a'] = node;
    }
    Node* get(char c){
        return links[c - 'a'];
    }
    void increasecnt(){
        cnt++;
    }
    int getcnt(){
        return cnt;
    }
};

class Trie{
private:
    Node *root;

public:
    Trie(){
        root = new Node();
    }
    void insert(string s){
        Node* cur_node = root;
        for(char c : s){
            if(!cur_node -> contains(c)){
                cur_node -> put(c, new Node());
            }
            //! move reference node
            cur_node = cur_node -> get(c);
            cur_node ->increasecnt();
        }
    }
    pii search(string s){
        Node* cur_node = root;
        pii ans = {0,0};
        int la = 0;
        for(char c : s){
            if(!cur_node -> contains(c)){
                return ans;
            }
            la++;
            cur_node = cur_node -> get(c);
            int val = cur_node ->getcnt();
            //dbg(c,la,val);
            if(val >= 3){
                ans = {la,val};
            }
        }
        return ans;
    }

};
