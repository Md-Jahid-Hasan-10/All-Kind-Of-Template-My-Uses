vector<vi>matMul(vector<vi>&mat1,vector<vi>&mat2,int n)
{
    vector<vi> res(n, vi(n,0));
    for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
            for(int k = 0; k < n; k++){
                res[i][j]=(res[i][j]+((ll)mat1[i][k]*mat2[k][j])%mod)%mod;
            }
        }
    }
    return res;
}
vector<vi>matExpo(vector<vi>& mat,int k,int n)
{
    if(k == 1)return mat;
    vector<vi>res=matExpo(mat,k/2,n);
    res =matMul(res,res,n);
    if(k & 1)res=matMul(res,mat,n);
    return res;
}
/*
F(k+1) =|mat^k|F(k)  |
F(k) =  |     |F(k−1)|
S(k) =  |     |S(k−1)|
S(k−1) =|     |S(k−2)|
*/
vi mulBase(vector<vi>&mat,vi &base,int n)
{
    vi res(n,0);
    for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
            res[i] += (ll)mat[i][j] * base[j] % mod;
            res[i] %= mod;
        }
    }
    return res;
}
void Goriber_solve()
{
    vi base = {1, 1, 1, 0};
    int n = 4;
    int x,y;
    cin >> x >> y;
    if(x == 0 && y == 0){
        cout << 0 << endl;
        return;
    }
    if(x == 0 && y == 1){
        cout << 1 << endl;
        return;
    }
    vector<vi>mat = {
        {1, 1, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 1, 0},
        {0, 0, 1, 0}
    };
    int Sl = 0,Sr = 0;
    if(x > 1){
        vector<vi> la = matExpo(mat,x-1, n);
        vi res = mulBase(la, base, n);
        Sl = res[3];
    }
    if(y != 0){
        mat = matExpo(mat,y, n);
        vi res = mulBase(mat,base, n);
        Sr = res[3];
    }
    cout << (Sr - Sl + mod) % mod << endl;
}
