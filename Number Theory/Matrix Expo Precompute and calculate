#include <bits/stdc++.h>
using namespace std;

const int MOD = 1e9 + 7;
using Matrix = vector<vector<int>>;
int n, m, q;
// Multiply two matrices (n x n)
Matrix multiply(const Matrix &A, const Matrix &B) {
    Matrix C(n, vector<int>(n, 0));
    for (int i = 0; i < n; i++) {
        for (int k = 0; k < n; k++) {
            if (A[i][k] == 0) continue;
            long long val = A[i][k];
            for (int j = 0; j < n; j++) {
                C[i][j] = (C[i][j] + val * B[k][j]) % MOD;
            }
        }
    }
    return C;
}
// Multiply vector (1 x n) by matrix (n x n)
vector<int> vec_multiply(const vector<int> &v, const Matrix &M) {
    vector<int> res(n, 0);
    for (int i = 0; i < n; i++) {
        if (v[i] == 0) continue;
        long long val = v[i];
        for (int j = 0; j < n; j++) {
            res[j] = (res[j] + val * M[i][j]) % MOD;
        }
    }
    return res;
}
int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    cin >> n >> m >> q;
    Matrix adj(n, vector<int>(n, 0));
    for (int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;
        adj[a - 1][b - 1] = 1;
    }
    // Precompute powers of adjacency matrix
    const int MAXLOG = 60;
    vector<Matrix> power(MAXLOG, Matrix(n, vector<int>(n, 0)));
    power[0] = adj;
    for (int i = 1; i < MAXLOG; i++) {
        power[i] = multiply(power[i - 1], power[i - 1]);
    }
    while (q--) {
        int s, t;
        long long k;
        cin >> s >> t >> k;
        s--, t--;

        vector<int> dp(n, 0);
        dp[s] = 1;
        for (int i = 0; i < MAXLOG; i++) {
            if ((k >> i) & 1) {
                dp = vec_multiply(dp, power[i]);
            }
        }
        cout << dp[t] << "\n";
    }
    return 0;
}
