map<int,int> bd;
int phi(int x)
{
    if(bd.count(x))return bd[x];
    int ans = x,val = x;
    for(int i = 2; i * i <= x; i++){
        if(val % i == 0){
            while(val % i == 0)val /= i;
            ans *= (i - 1);
            ans /= i;
        }
    }
    if(val > 1){
        ans *= (val - 1);
        ans /= val;
    }
    bd[x] = ans;
    return ans;
}
int phi[N];
bool mark[N];
void sieve(){
    for(int i = 1; i < N; i++){
        phi[i] = i;
    }
    for(int i = 2; i < N; i++){
        if(mark[i])continue;
        phi[i] = i - 1;
        for(int j = i + i; j < N; j += i){
            mark[j] = true;
            phi[j] -= phi[j] / i;
        }
    }
}
long long euler_phi(long long x){
	long long ans = x;
	for (long long i = 2; i * i <= x; i++){
		if (x % i == 0){
			ans /= i;
			ans *= i - 1;
			while (x % i == 0){
				x /= i;
			}
		}
	}
	if (x > 1){
		ans /= x;
		ans *= x - 1;
	}
	return ans;
}


